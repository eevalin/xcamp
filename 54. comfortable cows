#include <bits/stdc++.h>
using namespace std;

int main(){
  int n;
  cin >> n;
  vector<vector<bool>> grid (2500, vector<bool> (2500, false));
  int count = 0;
  queue<pair<int, int>> q;
  for (int i = 1; i <= n; i++){
    int x, y;
    cin >> x >> y;
    x += 505;
    y += 505;
    q.push(make_pair(x, y));
    while (!q.empty()){
      int curx = q.front().first;
      int cury = q.front().second;
      q.pop();
      if (!grid[curx][cury]){
        count++;
        grid[curx][cury] = true;
        vector<int> dx = {0, 0, 1, -1};
        vector<int> dy = {1, -1, 0, 0};
        if (grid[curx][cury]){
        int temp = 0;
        for (int j = 0; j < 4; j++)
          if (grid[curx + dx[j]][cury + dy[j]]) temp++;
        if (temp == 3){
          for (int j = 0; j < 4; j++){
            if (!grid[curx + dx[j]][cury+dy[j]]){
              q.push(make_pair(curx + dx[j], cury + dy[j]));
              break;
            }
          }
        }
        }
        for (int k = 0; k < 4; k++){
          if (grid[curx + dx[k]][cury + dy[k]]){
          int temp = 0;
          for (int j = 0; j < 4; j++)
            if (grid[curx + dx[k] + dx[j]][cury + dy[k] + dy[j]]) temp++;
          if (temp == 3){
            for (int j = 0; j < 4; j++){
              if (!grid[curx + dx[k] + dx[j]][cury+dy[k]+dy[j]]){
                q.push(make_pair(curx + dx[k] + dx[j], cury + dy[k] + dy[j]));
                break;
              }
            }
          }
          }
        }
      }
    }
    cout << count - i << '\n';
  }
}
