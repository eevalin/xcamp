#include <bits/stdc++.h>
using namespace std;

int main(){
  int n, a, b;
  cin >> n >> a >> b;
  vector<vector<char>> grid (n, vector<char>(n));
  for (int i = 0; i < n; i++)
    for (int j = 0; j < n; j++) cin >> grid[i][j];
  int ans = 0;
  for (int i = 0; i < n; i++){
    for (int j = 0; j < n; j++){
      vector<vector<bool>> vis (n, vector<bool>(n, false));
      priority_queue<vector<int>> pq;
      
      pq.push({0, i, j});
      int cur = 0;
      while (pq.size() > 0){
        int curx = pq.top()[1];
        int cury = pq.top()[2];
        int curstep = -pq.top()[0];
        pq.pop();
        if (!vis[curx][cury]) {
          vis[curx][cury] = true;
        cur = max(cur, curstep);
        vector<int> dx = {0, 0, -1, 1};
        vector<int> dy = {1, -1, 0, 0};
        for (int k = 0; k < 4; k++){
          int newx = curx + dx[k], newy = cury + dy[k];
          if (newx >= 0 && newx < n && newy >= 0 && newy < n){
          
            if (grid[newx][newy] == grid[curx][cury]) pq.push({-curstep - a, newx, newy});
            else pq.push({-curstep - b, newx, newy});
          }
        }
          }
      }
      ans = max(ans, cur);
    }
  }
  cout << ans;
}
